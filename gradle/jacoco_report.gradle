apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
}

subprojects {
    afterEvaluate {
        project.apply from: "${project.rootDir}/gradle/jacoco_report.gradle"
    }
}

final fileFilter = [
        '**/R.class', '**/R$*.class', '**/BuildConfig.*',
        '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*',
        '**/*JsonAdapter.*', // adapters generated by Moshi
        '**/*Dagger.*'
]

def isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
def isAndroidApp = project.plugins.hasPlugin('com.android.application')

afterEvaluate {
    def taskDependency
    def moduleClassSet
    def executionFilter

    boolean isAndroidModule = isAndroidLibrary || isAndroidApp
    if (isAndroidModule) {
        tasks.withType(Test) { jacoco.includeNoLocationClasses = true }
        taskDependency = [ 'testDebugUnitTest', 'createDebugCoverageReport' ]
        moduleClassSet = [
            fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter),
            fileTree(dir: "${project.buildDir}/intermediates/javac/debug", excludes: fileFilter)
        ]
        executionFilter = [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/debugAndroidTest/connected/*coverage.ec'
        ]
    } else {
        taskDependency = [ 'test' ]
        moduleClassSet = [
            fileTree(dir: "${project.buildDir}/classes/kotlin/main", excludes: fileFilter)
        ]
        executionFilter = [
            'jacoco/test.exec', 'outputs/code-coverage/connected/*coverage.ec'
        ]
    }

    tasks.create(name: "generateJacocoCoverage", type: JacocoReport, group: "verification", dependsOn: taskDependency) {
        description "Creating jacoco coverage report for $project.name"
        reports {
            csv.enabled = false
            xml.enabled = false
            html.enabled = true
        }

        sourceDirectories.setFrom files([
                "$project.projectDir/src/main/java",
                "$project.projectDir/src/main/kotlin"
        ])

        classDirectories.setFrom files(moduleClassSet)
        executionData.setFrom fileTree(dir: project.buildDir, includes: executionFilter)
    }
}
